#pragma once

#include "mcpe/entity/Mob.h"
#include "mcpe/gamemode/GameType.h"
#include "mcpe/util/FullBlock.h"
class ChunkSource;
class GlobalPermissionsLevel;
class UserPermissionsLevel;
class BlockEntity;
class TelemetryEventPacket;
class Inventory;
class Tick;
class SkinInfoData;
class CooldownType;
class Agent;
class IContainerManager;
class NetworkIdentifier;
class PacketSender;
class EventPacket;
class ChalkboardBlockEntity;
class CommandPermissionLevel;

class Player : public Mob 
{
public:
	char filler2[2971];
	bool creativeMode;
	bool surivivalMode;
public:
	virtual ~Player();
	virtual void reloadHardcoded(Entity::InitializationMethod, VariantParameterList const&);
	virtual void initializeComponents(Entity::InitializationMethod, VariantParameterList const&);
	virtual void remove();
	virtual void teleportTo(Vec3 const&, int, int);
	virtual void getAddPacket();
	virtual void normalTick();
	virtual void rideTick();
	virtual int getRidingHeight();
	virtual bool onLadder(bool);
	virtual int getHeadHeight() const;
	virtual int getCameraOffset() const;
	virtual bool isImmobile() const;
	virtual bool isPushable() const;
	virtual bool isPushableByPiston() const;
	virtual bool isShootable();
	virtual bool isCreativeModeAllowed();
	virtual void onBounceStarted(BlockPos const&, FullBlock const&);
	virtual void feed(int);
	virtual void handleEntityEvent(EntityEvent, int);
	virtual void awardKillScore(Entity&, int);
	virtual void setEquippedSlot(ArmorSlot, int, int);
	virtual void setEquippedSlot(ArmorSlot, ItemInstance const&);
	virtual EntityType getEntityTypeId() const;
	virtual int getPortalCooldown() const;
	virtual int getPortalWaitTime() const;
	virtual void onSynchedDataUpdate(int);
	virtual bool canBePulledIntoVehicle() const;
	virtual void sendMotionPacketIfNeeded();
	virtual bool useItem(ItemInstance&) const;
	virtual void getMapDecorationRotation();
	virtual bool isWorldBuilder();
	virtual bool isCreative() const;
	virtual void add(ItemInstance&);
	virtual void _hurt(EntityDamageSource const&, int, bool, bool);
	virtual void lavaHurt();
	virtual void readAdditionalSaveData(CompoundTag const&);
	virtual void addAdditionalSaveData(CompoundTag&);
	virtual void die(EntityDamageSource const&);
	virtual bool isSleeping() const;
	virtual float getSpeed() const;
	virtual void setSpeed(float);
	virtual void actuallyHurt(int, EntityDamageSource const*, bool);
	virtual void travel(float, float);
	virtual void aiStep();
	virtual ItemInstance* getCarriedItem();
	virtual ItemInstance* getCarriedItem() const;
	virtual UseDuration getItemUseDuration();
	virtual void getAllHand() const;
	virtual void getAllHand();
	virtual void getAllEquipment() const;
	virtual void getAllEquipment();
	virtual void sendInventory() const;
	virtual void jumpFromGround();
	virtual void updateAi();
	virtual void getExperienceReward() const;
	virtual void dropEquipment(EntityDamageSource const&, int);
	virtual void useNewAi() const;
	virtual void prepareRegion(ChunkSource&);
	virtual void destroyRegion();
	virtual void suspendRegion();
	virtual void onPrepChangeDimension();
	virtual void onDimensionChanged();
	virtual void changeDimensionWithCredits(DimensionId);
	virtual void tickWorld(Tick const&);
	virtual void moveView();
	virtual void setName(std::string const&);
	virtual void checkMovementStats(Vec3 const&);
	virtual void respawn();
	virtual void resetPos(bool);
	virtual bool isInTrialMode();
	virtual void hasResource(int);
	virtual void completeUsingItem();
	virtual void setPermissions(CommandPermissionLevel);
	virtual void startCrafting(BlockPos const&, bool);
	virtual void startStonecutting(BlockPos const&);
	virtual void startDestroying();
	virtual void stopDestroying();
	virtual void openContainer(int, BlockPos const&);
	virtual void openContainer(int, EntityUniqueID const&);
	virtual void openFurnace(int, BlockPos const&);
	virtual void openEnchanter(int, BlockPos const&);
	virtual void openAnvil(int, BlockPos const&);
	virtual void openBrewingStand(int, BlockPos const&);
	virtual void openHopper(int, BlockPos const&);
	virtual void openHopper(int, EntityUniqueID const&);
	virtual void openDispenser(int, BlockPos const&, bool);
	virtual void openBeacon(int, BlockPos const&);
	virtual void openPortfolio();
	virtual void openHorseInventory(int, EntityUniqueID const&);
	virtual bool canOpenContainerScreen();
	virtual void openChalkboard(ChalkboardBlockEntity&);
	virtual void openNpcInteractScreen(Entity&);
	virtual void openInventory();
	virtual void openStructureEditor(BlockPos const&);
	virtual void displayChatMessage(std::string const&, std::string const&);
	virtual void displayClientMessage(std::string const&);
	virtual void displayLocalizableMessage(std::string const&, std::vector<std::string, std::allocator<std::string> > const&, bool);
	virtual void displayWhisperMessage(std::string const&, std::string const&);
	virtual void startSleepInBed(BlockPos const&);
	virtual void stopSleepInBed(bool, bool);
	virtual bool canStartSleepInBed();
	virtual void getSleepTimer() const;
	virtual void openTextEdit(BlockEntity*);
	virtual bool isLocalPlayer() const;
	virtual void stopLoading();
	virtual void registerTrackedBoss(EntityUniqueID);
	virtual void unRegisterTrackedBoss(EntityUniqueID);
	virtual void setPlayerGameType(GameType);
	virtual void _crit(Entity&);
	virtual void getEventing() const;
	virtual void sendEventPacket(EventPacket const&) const;
	virtual void addExperience(int);
	virtual void addLevels(int);
	//pure virtual method
	//pure virtual method
	//pure virtual method
	virtual void deleteContainerManager();
	virtual void setFieldOfViewModifier(float);
	virtual bool isPositionRelevant(DimensionId, BlockPos const&);
	virtual bool isEntityRelevant(Entity const&);
	virtual void onSuspension();
	virtual void startCooldown(Item*);
	virtual void getItemCooldownLeft(CooldownType) const;
	virtual bool isItemInCooldown(CooldownType) const;
	virtual void onMovePlayerPacketNormal(Vec3 const&, Vec2 const&);
public:
	enum class PositionMode:int
	{
		
	};
public:
	Player(Level&, PacketSender&, GameType, NetworkIdentifier const&, std::unique_ptr<SkinInfoData, std::default_delete<SkinInfoData> >, mce::UUID);
	bool isBouncing() const;
	bool isHiddenFrom(Mob&) const;
	ItemInstance* getSelectedItem() const;
	void getClientId() const;
	void getSkin() const;
	void stopGliding();
	void startGliding();
	void getPermissions();
	bool isValidUserName(std::string const&);
	void getSpawnPosition();
	void handleJumpEffects();
	void getContainerManager();
	void updateTeleportDestPos();
	void setSkin(std::string const&, std::vector<unsigned char, std::allocator<unsigned char> > const&);
	void canDestroy(Block const&) const;
	bool isSurvival() const;
	void getSupplies() const;
	void getDimension() const;
	bool isForcedRespawn() const;
	void setAgent(Agent*);
	void getAgent() const;
	void setRespawnPosition(BlockPos const&, bool);
	void setRespawnDimensionId(DimensionId);
	void setAllPlayersSleeping();
	bool isSleepingLongEnough() const;
	void setChunkRadius(int);
	void setContainerManager(std::shared_ptr<IContainerManager>);
	float getChunkRadius() const;
	bool isHurt();
	int getPlayerLevel() const;
	void getNewEnchantmentSeed();
	void getEnchantmentSeed() const;
	void sendInventorySlot(int) const;
	void getTrackedBosses();
	void spawnExperienceOrb(Vec3 const&, int);
	void take(Entity&, int);
	void getLuck();
	bool isInCreativeMode();
	void _addLevels(int);
	void getCapePos(float);
	ItemInstance* getItemInUse();
	void setBedOffset(int);
	void stopUsingItem();
	void _tickCooldowns();
	void setPlayerIndex(int);
	void startUsingItem(ItemInstance, int);
	void getAttackDamage();
	void _applyExhaustion(Vec3 const&);
	void getSleepRotation();
	void releaseUsingItem();
	void resetPlayerLevel();
	void getTicksUsingItem();
	void registerAttributes();
	void causeFoodExhaustion(float);
	void filterValidUserName(std::string const&);
	void updateTrackedBosses();
	void recheckSpawnPosition();
	void setDefaultHeadHeight();
	void handleMovePlayerPacket(Player::PositionMode, Vec3 const&, Vec2 const&, float);
	void setTeleportDestination(Vec3 const&);
	void _registerElytraLoopSound();
	void shouldUpdateBossGUIBinds();
	void fireDimensionChangedEvent(DimensionId);
	void getStandingPositionOnBlock(BlockPos const&);
	void shouldUpdateBosGUIControls();
	void getHudContainerManagerModel();
	void canUseCarriedItemWhileMoving();
	void eat(ItemInstance const&);
	void eat(int, float);
	void _touch(Entity&);
	void attack(Entity&);
	void checkBed(bool);
	void getScore();
	void interact(Entity&);
	void moveCape();
	bool isUsingItem() const;
	void getDirection() const;
	void getPlayerIndex() const;
	void getDestroySpeed(Block const&) const;
	void fixSpawnPosition(BlockPos&, std::vector<BlockSource*, std::allocator<BlockSource*> >) const;
	void getLevelProgress() const;
	void hasOpenContainer() const;
	void getDestroyProgress(Block const&) const;
	void hasRespawnPosition() const;
	void _getItemDestroySpeed(Block const&) const;
	void fixStartSpawnPosition(BlockPos&, std::vector<BlockSource*, std::allocator<BlockSource*> >) const;
	void getXpNeededForNextLevel() const;
	bool isHungry() const;
	bool isViewer() const;
public:
	static float const DISTANCE_TO_TRANSFORM_EVENT;
	static float const EXHAUSTION;
	static float const SATURATION;
	static float const HUNGER;
	static float const EXPERIENCE;
	static float const DEFAULT_BB_WIDTH;
	static float const DEFAULT_BB_HEIGHT;
	static float const DEFAULT_FLY_SPEED;
	static float const DEFAULT_WALK_SPEED;
	static float const DISTANCE_TO_TRAVELLED_EVENT;
	static float const DEFAULT_PLAYER_HEIGHT_OFFSET;
	static float const PLAYER_GLIDING_CAMERA_OFFSET;
	static float const LEVEL;
};
